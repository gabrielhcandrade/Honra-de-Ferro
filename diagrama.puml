@startuml
!theme vibrant

' Classes Principais'
class Game {
  - _tela: pygame.Surface
  - _asset_manager: AssetManager
  - _estado: str
  - _ranking_manager: RankingManager
  - _menu: Menu
  - _config: ConfigScreen
  - _batalha: BatalhaDragao
  - _game_over_screen: GameOverScreen
  - _tela_ranking_pygame: TelaRankingPygame
  + executar(): None
  + set_estado(estado: str): None
  + salvar_progresso_jogo(): None
  + carregar_progresso_jogo(): bool
}

class AssetManager {
  - _animations: Dict
  - _images: Dict
  - _sounds: Dict
  + get_animacao(personagem: str, acao: str): List[pygame.Surface]
  + get_imagem(nome_imagem: str): pygame.Surface
  + get_som(nome_som: str): Optional[pygame.mixer.Sound]
}

class BatalhaDragao {
  - _jogador: Jogador
  - _dragao: Optional[Dragao]
  - _esqueletos: pygame.sprite.Group
  - _fireballs: pygame.sprite.Group
  - _pocoes: pygame.sprite.Group
  + atualizar(volume_efeitos: float): Optional[str]
  + desenhar(): None
  + reset_batalha(): None
  + to_dict(): Dict
  + from_dict(data: Dict): None
}

' Entidades'
abstract class Entidade(pygame.sprite.Sprite) {
  # _vida: int
  # _vida_maxima: int
  # _acao: str
  # _direcao: int
  + receber_dano(quantidade: int): None
  + curar(quantidade: int): None
  + update(): None
  + to_dict(): Dict
}

class Jogador(Entidade) {
  - _num_pocoes: int
  - _atacando: bool
  - _defendendo: bool
  + processar_movimento(...): None
  + usar_pocao(): None
  + coletar_pocao(): None
}

class Esqueleto(Entidade) {
  - _dano: int
  - _raio_ataque: int
  + update(rect_jogador: pygame.Rect): None
}

class Dragao(Entidade) {
  - _ataque_cooldown: int
  - _grupo_projeteis: pygame.sprite.Group
  + update(rect_jogador: pygame.Rect): None
}

' Sprites e Componentes'
class BolaDeFogo(pygame.sprite.Sprite) {
  - _vel_x: float
  - _vel_y: float
  + update(): None
}

class Pocao(pygame.sprite.Sprite) {
  + update(): None
}

class DanoPopup(pygame.sprite.Sprite) {
  - _lifespan: int
  + update(): None
}

class Particle(pygame.sprite.Sprite) {
    - _lifespan: int
    + update(): None
}

class Button {
  - _texto: str
  - _posicao: Tuple
  + desenhar(tela: pygame.Surface, selecionado: bool): None
  + clicado(mouse_pos: Tuple): bool
}

' Sistema de Ranking'
class RankingManager {
  - _jogadores: List[JogadorRanking]
  + adicionar_jogador(jogador: JogadorRanking): None
  + salvar_em_arquivo(): None
  + carregar_de_arquivo(): None
}

class JogadorRanking {
  - _nome: str
  - _pontuacao: int
  + to_dict(): Dict
}

class NomeJogador {
    - _nome: str
    - _ativo: bool
    + processar_evento(evento: pygame.event.Event): Optional[str]
    + desenhar(tela: pygame.Surface): None
}

' Telas do Jogo'
package "Telas" {
  class Menu {
    - _botoes: List[Button]
    + desenhar(): None
  }

  class Menu2 {
    + desenhar(): None
  }

  class ConfigScreen {
    - _volume_musica: float
    - _volume_efeitos: float
    + desenhar(tela: pygame.Surface): None
  }

  class GameOverScreen {
    - _opcoes: List[str]
    + desenhar(): None
  }

  class TelaRankingPygame {
    - _ranking_manager: RankingManager
    + desenhar(): None
  }
}

' Relacionamentos'

'Composição: Game é composto por suas telas e sistemas principais'
Game "1" *-- "1" AssetManager
Game "1" *-- "1" BatalhaDragao
Game "1" *-- "1" RankingManager
Game "1" *-- "1" NomeJogador
Game "1" *-- "1" Menu
Game "1" *-- "1" ConfigScreen
Game "1" *-- "1" GameOverScreen
Game "1" *-- "1" TelaRankingPygame
Game "1" *-- "1" Menu2

'Agregação: Batalha agrega as entidades e outros sprites'
BatalhaDragao o-- "1" Jogador
BatalhaDragao o-- "0..1" Dragao
BatalhaDragao o-- "*" Esqueleto
BatalhaDragao o-- "*" Pocao
BatalhaDragao o-- "*" BolaDeFogo
BatalhaDragao o-- "*" Particle
BatalhaDragao o-- "1" AssetManager

'Herança: Entidades especializadas herdam de Entidade'
Entidade <|-- Jogador
Entidade <|-- Esqueleto
Entidade <|-- Dragao

'Dependência/Uso'
Game ..> Button : "usa para criar menus"
Menu o-- "*" Button

Entidade ..> DanoPopup : "cria ao receber dano"
Entidade o-- "1" AssetManager

Dragao ..> BolaDeFogo : "cria para atacar"
Jogador ..> Pocao : "coleta"

RankingManager o-- "*" JogadorRanking
TelaRankingPygame ..> RankingManager : "usa para exibir"
NomeJogador ..> RankingManager : "usa para validar nome"

BatalhaDragao ..> Game : "informa estado"
ConfigScreen ..> Game

@enduml